[workspace]
members = [".", "backend", "common", "entity", "frontend", "migration", "service"]

[package]
name = "simple-messenger"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[workspace.dependencies]
anyhow = "1.0.75"
api-error-derive = { git = "https://github.com/dpytaylo/api-error-derive", branch = "main" }
async-trait = "0.1.74"
axum = "0.7.2"
bincode = "1.3.3"
cfg-if = "1.0.0"
console_error_panic_hook = "0.1.7"
dotenvy = "0.15.7"
gloo-net = "0.5.0"
http = "1.0.0"
leptos = { version = "0.5.4", features = ["nightly"] }
leptos_axum.version = "0.6.0-alpha"
leptos_meta = { version = "0.5.4", features = ["nightly"] }
leptos_router = { version = "0.5.4", features = ["nightly"] }
log = "0.4.20"
oauth2 = "4.4.2"
scrypt = "0.11.0"
sea-orm = "0.12.8"
sea-orm-migration = "0.12.6"
serde = "1.0.193"
serde_qs = "0.12.0"
strum = "0.25.0"
strum_macros = "0.25.3"
rand_chacha = "0.3.1"
redis = "0.24.0"
reqwest = { version = "0.11.22", features = ["brotli", "json"] }
thiserror = "1.0.50"
tracing = "0.1.40"
tracing-subscriber = "0.3.18"
tracing-wasm = "0.2.1"
tokio = "1.34.0"
tower = "0.4.13"
tower-http = "0.5.0"
tower-cookies = "0.10.0"
uuid = "1.6.1"
validator = "0.16.1"
wasm-bindgen = "0.2.89"

[dependencies]
backend = { path = "backend", optional = true }
frontend = { path = "frontend" }
entity = { path = "entity", optional = true }
migration = { path = "migration", optional = true }

anyhow.workspace = true
api-error-derive = { workspace = true, optional = true }
axum = { workspace = true, features = ["ws"], optional = true }
cfg-if.workspace = true
console_error_panic_hook.workspace = true
dotenvy = { workspace = true, optional = true }
http = { workspace = true }
leptos.workspace = true
leptos_axum = { workspace = true, optional = true }
leptos_meta.workspace = true
leptos_router.workspace = true
log.workspace = true
serde = { workspace = true, features = ["derive"] }
thiserror.workspace = true
tracing.workspace = true
tracing-subscriber.workspace = true
tracing-wasm = { workspace = true, optional = true }
tokio = { workspace = true, optional = true }
tower = { workspace = true, optional = true }
tower-http = { workspace = true, features = ["cors", "fs"], optional = true }
tower-cookies = { workspace = true, optional = true }
wasm-bindgen.workspace = true

[features]
hydrate = [
    "leptos/hydrate",
    "leptos_meta/hydrate",
    "leptos_router/hydrate",
    "dep:tracing-wasm"
]

ssr = [
    "dep:backend",
    "dep:entity",
    "dep:migration",

    "frontend/ssr",

    "dep:api-error-derive",
    "dep:axum",
    "dep:dotenvy",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "dep:tower-cookies",
    "dep:leptos_axum",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
]

[profile.dev.package.scrypt]
opt-level = 3

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "simple-messenger"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
# style-file = "style/main.css"

# The tailwind input file.
#
# Optional, Activates the tailwind build
tailwind-input-file = "style/tailwind.css"

# The tailwind config file.
#
# Optional, defaults to "tailwind.config.js" which if is not present
# is generated for you
tailwind-config-file = "tailwind.config.js"

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
